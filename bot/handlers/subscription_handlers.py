from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from bot.services import user_service, subscription_service


async def my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user_service.register_user(user)

    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram")
        return

    subscriptions = subscription_service.get_user_subscriptions(username)
    if not subscriptions:
        await update.message.reply_text("ü§∑ –í—ã –ø–æ–∫–∞ –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
        return

    sub_list = "\n".join([f"‚Ä¢ @{sub}" for sub in subscriptions])
    await update.message.reply_text(f"‚≠ê <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{sub_list}", parse_mode="HTML")


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    subscriber_username = user_service.register_user(user)

    if not subscriber_username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram")
        return

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è)
    if not context.args:
        all_users = user_service.get_all_users()
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        available_users = [u for u in all_users if u.lower() != subscriber_username]

        if not available_users:
            await update.message.reply_text("ü§∑ –ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        user_list = "\n".join([f"‚Ä¢ /subscribe @{user}" for user in available_users])
        await update.message.reply_text(
            f"üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n{user_list}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/subscribe @username</code>",
            parse_mode="HTML"
        )
        return

    target_username = context.args[0].lstrip('@')
    if not target_username:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username")
        return

    # –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è
    if target_username.lower() == subscriber_username:
        await update.message.reply_text("ü§î –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not user_service.get_user_id(target_username):
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")
        return

    if subscription_service.add_subscription(subscriber_username, target_username):
        await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{target_username}")
    else:
        await update.message.reply_text(f"‚ùå –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{target_username}")


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    subscriber_username = user_service.register_user(user)

    if not subscriber_username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram")
        return

    if not context.args:
        subscriptions = subscription_service.get_user_subscriptions(subscriber_username)
        if not subscriptions:
            await update.message.reply_text("ü§∑ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return

        sub_list = "\n".join([f"‚Ä¢ /unsubscribe @{sub}" for sub in subscriptions])
        await update.message.reply_text(
            f"‚≠ê <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n{sub_list}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/unsubscribe @username</code>",
            parse_mode="HTML"
        )
        return

    target_username = context.args[0].lstrip('@')
    if not target_username:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username")
        return

    if subscription_service.remove_subscription(subscriber_username, target_username):
        await update.message.reply_text(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç @{target_username}")
    else:
        await update.message.reply_text(f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{target_username}")


async def my_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user_service.register_user(user)

    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram")
        return

    subscribers = subscription_service.get_user_subscribers(username)

    if not subscribers:
        await update.message.reply_text("ü§∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return

    subscribers_list = "\n".join([f"‚Ä¢ @{sub}" for sub in subscribers])
    await update.message.reply_text(
        f"üë• <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>\n{subscribers_list}",
        parse_mode="HTML"
    )

def get_subscription_handlers():
    return [
        CommandHandler("mysubscriptions", my_subscriptions),
        CommandHandler("mysubscribers", my_subscribers),
        CommandHandler("subscribe", subscribe),
        CommandHandler("unsubscribe", unsubscribe)
    ]